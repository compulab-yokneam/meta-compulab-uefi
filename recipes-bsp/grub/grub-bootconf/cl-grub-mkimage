#!/bin/bash -x

mount_point=${mount_point:-"/"}
root_dev=$(findmnt ${mount_point} --noheading -o SOURCE)
root_uuid=$(grub-probe --target=fs_uuid --device ${root_dev})

function cl_grub_mkimage() {

local grub_pref="/efi/boot"
local grub_path="/boot/grub"
local mkimage_cfg=$(mktemp --dry-run --suffix=".cfg")

cat << eof | tee ${mkimage_cfg}
search.fs_uuid ${root_uuid} root
set prefix=(\$root)${grub_path}
configfile \$prefix/grub.cfg
eof

mkdir -p ${mount_point}/${grub_path}

declare -A efi_info=(['armhf']='arm-efi bootarm.efi' ['arm64']='arm64-efi bootaa64.efi')
local efi_arch=$(dpkg --print-architecture)
local efi_data=(${efi_info[${efi_arch}]})

local image_path=boot/efi/${grub_pref}

mkdir -p ${mount_point}/${image_path}

grub-mkimage \
    -d ${mount_point}/usr/lib/grub/${efi_data[0]} \
    -o ${mount_point}/${image_path}/${efi_data[1]} \
    -p ${grub_pref} \
    -O ${efi_data[0]} \
    fat iso9660 part_gpt part_msdos normal boot linux configfile loopback chain efifwsetup efi_gop \
    ls search search_label search_fs_uuid search_fs_file gfxterm gfxterm_background  gfxterm_menu test \
    all_video loadenv exfat ext2 ntfs btrfs hfsplus udf echo reboot serial cat gcry_sha256 halt hashsum \
    sleep reboot regexp gzio 

mv ${mkimage_cfg} ${mount_point}/${image_path}/grub.cfg

}

function cl_grub_mkimage_init() {
    boot_dev=$(findmnt ${mount_point} --noheading -o SOURCE)
    [[ -n ${boot_dev:-""} ]] && boot_dev=${boot_dev:0:-1}1 || exit 0
    mkdir -p ${mount_point}/boot/efi/
    mount ${boot_dev} ${mount_point}/boot/efi/
}

function cl_grub_mkimage_fini() {
    umount ${mount_point}/boot/efi
}

[[ -z ${CL_INIT:-""} ]] ||  cl_grub_mkimage_init
cl_grub_mkimage
[[ -z ${CL_INIT:-""} ]] ||  cl_grub_mkimage_fini
